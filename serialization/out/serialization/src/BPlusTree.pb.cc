// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization/src/BPlusTree.proto

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>

#include <algorithm>

#include "BPlusTree.pb.h"
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_serialization_2fsrc_2fBPlusTree_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serialization_2fsrc_2fBPlusTree_2eproto ::
    google::protobuf::internal::SCCInfo<0>
        scc_info_LeafNodeS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_serialization_2fsrc_2fBPlusTree_2eproto ::
    google::protobuf::internal::SCCInfo<1>
        scc_info_BPlusTreeNodeS;
}  // namespace protobuf_serialization_2fsrc_2fBPlusTree_2eproto
class BPlusTreeSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BPlusTreeS> _instance;
} _BPlusTreeS_default_instance_;
class BPlusTreeNodeSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BPlusTreeNodeS> _instance;
  const ::LeafNodeS* leaf_node_;
  const ::InternalNodeS* internal_node_;
} _BPlusTreeNodeS_default_instance_;
class InternalNodeSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalNodeS> _instance;
} _InternalNodeS_default_instance_;
class LeafNodeSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafNodeS> _instance;
} _LeafNodeS_default_instance_;
namespace protobuf_serialization_2fsrc_2fBPlusTree_2eproto {
static void InitDefaultsBPlusTreeS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BPlusTreeS_default_instance_;
    new (ptr)::BPlusTreeS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BPlusTreeS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BPlusTreeS = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsBPlusTreeS},
    {
        &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
             scc_info_BPlusTreeNodeS.base,
        &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_LeafNodeS
             .base,
    }};

static void InitDefaultsBPlusTreeNodeS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BPlusTreeNodeS_default_instance_;
    new (ptr)::BPlusTreeNodeS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_InternalNodeS_default_instance_;
    new (ptr)::InternalNodeS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BPlusTreeNodeS::InitAsDefaultInstance();
  ::InternalNodeS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BPlusTreeNodeS = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     1, InitDefaultsBPlusTreeNodeS},
    {
        &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_LeafNodeS
             .base,
    }};

static void InitDefaultsLeafNodeS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LeafNodeS_default_instance_;
    new (ptr)::LeafNodeS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LeafNodeS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeafNodeS = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsLeafNodeS},
    {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BPlusTreeS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BPlusTreeNodeS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafNodeS.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32
    TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeS,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeS, root_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeS, max_keys_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeS, min_keys_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeS, start_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeNodeS,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeNodeS,
                                                       _oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        offsetof(::BPlusTreeNodeSDefaultTypeInternal, leaf_node_),
        offsetof(::BPlusTreeNodeSDefaultTypeInternal, internal_node_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BPlusTreeNodeS,
                                                       node_type_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InternalNodeS,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InternalNodeS, keys_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::InternalNodeS,
                                                       children_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LeafNodeS,
                                                       _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LeafNodeS, keys_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LeafNodeS, values_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LeafNodeS, next_),
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::BPlusTreeS)},
        {9, -1, sizeof(::BPlusTreeNodeS)},
        {17, -1, sizeof(::InternalNodeS)},
        {24, -1, sizeof(::LeafNodeS)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::_BPlusTreeS_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::_BPlusTreeNodeS_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::_InternalNodeS_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::_LeafNodeS_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors("serialization/src/BPlusTree.proto", schemas,
                    file_default_instances, TableStruct::offsets,
                    file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&)
    GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
      protodesc_cold) = {
      "\n!serialization/src/BPlusTree.proto\"j\n\nB"
      "PlusTreeS\022\035\n\004root\030\001 \001(\0132\017.BPlusTreeNodeS"
      "\022\020\n\010MAX_KEYS\030\002 \001(\005\022\020\n\010MIN_KEYS\030\003 "
      "\001(\005\022\031\n\005"
      "start\030\004 \001(\0132\n.LeafNodeS\"g\n\016BPlusTreeNode"
      "S\022\037\n\tleaf_node\030\001 \001(\0132\n.LeafNodeSH\000\022\'\n\rin"
      "ternal_node\030\002 \001(\0132\016.InternalNodeSH\000B\013\n\tn"
      "ode_type\"@\n\rInternalNodeS\022\014\n\004keys\030\001 \003(\005\022"
      "!\n\010children\030\002 \003(\0132\017.BPlusTreeNodeS\"C\n\tLe"
      "afNodeS\022\014\n\004keys\030\001 \003(\005\022\016\n\006values\030\002 "
      "\003(\004\022\030\n"
      "\004next\030\003 \001(\0132\n.LeafNodeSb\006proto3"};
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "serialization/src/BPlusTree.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
}  // namespace protobuf_serialization_2fsrc_2fBPlusTree_2eproto

// ===================================================================

void BPlusTreeS::InitAsDefaultInstance() {
  ::_BPlusTreeS_default_instance_._instance.get_mutable()->root_ =
      const_cast<::BPlusTreeNodeS*>(
          ::BPlusTreeNodeS::internal_default_instance());
  ::_BPlusTreeS_default_instance_._instance.get_mutable()->start_ =
      const_cast<::LeafNodeS*>(::LeafNodeS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BPlusTreeS::kRootFieldNumber;
const int BPlusTreeS::kMAXKEYSFieldNumber;
const int BPlusTreeS::kMINKEYSFieldNumber;
const int BPlusTreeS::kStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BPlusTreeS::BPlusTreeS()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeS
           .base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BPlusTreeS)
}
BPlusTreeS::BPlusTreeS(const BPlusTreeS& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root()) {
    root_ = new ::BPlusTreeNodeS(*from.root_);
  } else {
    root_ = NULL;
  }
  if (from.has_start()) {
    start_ = new ::LeafNodeS(*from.start_);
  } else {
    start_ = NULL;
  }
  ::memcpy(&max_keys_, &from.max_keys_,
           static_cast<size_t>(reinterpret_cast<char*>(&min_keys_) -
                               reinterpret_cast<char*>(&max_keys_)) +
               sizeof(min_keys_));
  // @@protoc_insertion_point(copy_constructor:BPlusTreeS)
}

void BPlusTreeS::SharedCtor() {
  ::memset(&root_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&min_keys_) -
                               reinterpret_cast<char*>(&root_)) +
               sizeof(min_keys_));
}

BPlusTreeS::~BPlusTreeS() {
  // @@protoc_insertion_point(destructor:BPlusTreeS)
  SharedDtor();
}

void BPlusTreeS::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete start_;
}

void BPlusTreeS::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor* BPlusTreeS::descriptor() {
  ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const BPlusTreeS& BPlusTreeS::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeS
           .base);
  return *internal_default_instance();
}

void BPlusTreeS::Clear() {
  // @@protoc_insertion_point(message_clear_start:BPlusTreeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && root_ != NULL) {
    delete root_;
  }
  root_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  ::memset(&max_keys_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&min_keys_) -
                               reinterpret_cast<char*>(&max_keys_)) +
               sizeof(min_keys_));
  _internal_metadata_.Clear();
}

bool BPlusTreeS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BPlusTreeS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BPlusTreeNodeS root = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MAX_KEYS = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &max_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 MIN_KEYS = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &min_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LeafNodeS start = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BPlusTreeS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BPlusTreeS)
  return false;
#undef DO_
}

void BPlusTreeS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BPlusTreeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .BPlusTreeNodeS root = 1;
  if (this->has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_root(), output);
  }

  // int32 MAX_KEYS = 2;
  if (this->max_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->max_keys(), output);
  }

  // int32 MIN_KEYS = 3;
  if (this->min_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        3, this->min_keys(), output);
  }

  // .LeafNodeS start = 4;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_start(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:BPlusTreeS)
}

::google::protobuf::uint8* BPlusTreeS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BPlusTreeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .BPlusTreeNodeS root = 1;
  if (this->has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_root(), deterministic,
                                    target);
  }

  // int32 MAX_KEYS = 2;
  if (this->max_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->max_keys(), target);
  }

  // int32 MIN_KEYS = 3;
  if (this->min_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->min_keys(), target);
  }

  // .LeafNodeS start = 4;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(4, this->_internal_start(), deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BPlusTreeS)
  return target;
}

size_t BPlusTreeS::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:BPlusTreeS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .BPlusTreeNodeS root = 1;
  if (this->has_root()) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*root_);
  }

  // .LeafNodeS start = 4;
  if (this->has_start()) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*start_);
  }

  // int32 MAX_KEYS = 2;
  if (this->max_keys() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->max_keys());
  }

  // int32 MIN_KEYS = 3;
  if (this->min_keys() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->min_keys());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPlusTreeS::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:BPlusTreeS)
  GOOGLE_DCHECK_NE(&from, this);
  const BPlusTreeS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BPlusTreeS>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:BPlusTreeS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:BPlusTreeS)
    MergeFrom(*source);
  }
}

void BPlusTreeS::MergeFrom(const BPlusTreeS& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:BPlusTreeS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_root()) {
    mutable_root()->::BPlusTreeNodeS::MergeFrom(from.root());
  }
  if (from.has_start()) {
    mutable_start()->::LeafNodeS::MergeFrom(from.start());
  }
  if (from.max_keys() != 0) {
    set_max_keys(from.max_keys());
  }
  if (from.min_keys() != 0) {
    set_min_keys(from.min_keys());
  }
}

void BPlusTreeS::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:BPlusTreeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPlusTreeS::CopyFrom(const BPlusTreeS& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:BPlusTreeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPlusTreeS::IsInitialized() const { return true; }

void BPlusTreeS::Swap(BPlusTreeS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BPlusTreeS::InternalSwap(BPlusTreeS* other) {
  using std::swap;
  swap(root_, other->root_);
  swap(start_, other->start_);
  swap(max_keys_, other->max_keys_);
  swap(min_keys_, other->min_keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BPlusTreeS::GetMetadata() const {
  protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void BPlusTreeNodeS::InitAsDefaultInstance() {
  ::_BPlusTreeNodeS_default_instance_.leaf_node_ =
      const_cast<::LeafNodeS*>(::LeafNodeS::internal_default_instance());
  ::_BPlusTreeNodeS_default_instance_.internal_node_ =
      const_cast<::InternalNodeS*>(
          ::InternalNodeS::internal_default_instance());
}
void BPlusTreeNodeS::set_allocated_leaf_node(::LeafNodeS* leaf_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node_type();
  if (leaf_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leaf_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaf_node, submessage_arena);
    }
    set_has_leaf_node();
    node_type_.leaf_node_ = leaf_node;
  }
  // @@protoc_insertion_point(field_set_allocated:BPlusTreeNodeS.leaf_node)
}
void BPlusTreeNodeS::set_allocated_internal_node(
    ::InternalNodeS* internal_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node_type();
  if (internal_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      internal_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, internal_node, submessage_arena);
    }
    set_has_internal_node();
    node_type_.internal_node_ = internal_node;
  }
  // @@protoc_insertion_point(field_set_allocated:BPlusTreeNodeS.internal_node)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BPlusTreeNodeS::kLeafNodeFieldNumber;
const int BPlusTreeNodeS::kInternalNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BPlusTreeNodeS::BPlusTreeNodeS()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeNodeS
           .base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BPlusTreeNodeS)
}
BPlusTreeNodeS::BPlusTreeNodeS(const BPlusTreeNodeS& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_node_type();
  switch (from.node_type_case()) {
    case kLeafNode: {
      mutable_leaf_node()->::LeafNodeS::MergeFrom(from.leaf_node());
      break;
    }
    case kInternalNode: {
      mutable_internal_node()->::InternalNodeS::MergeFrom(from.internal_node());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BPlusTreeNodeS)
}

void BPlusTreeNodeS::SharedCtor() { clear_has_node_type(); }

BPlusTreeNodeS::~BPlusTreeNodeS() {
  // @@protoc_insertion_point(destructor:BPlusTreeNodeS)
  SharedDtor();
}

void BPlusTreeNodeS::SharedDtor() {
  if (has_node_type()) {
    clear_node_type();
  }
}

void BPlusTreeNodeS::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor* BPlusTreeNodeS::descriptor() {
  ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const BPlusTreeNodeS& BPlusTreeNodeS::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeNodeS
           .base);
  return *internal_default_instance();
}

void BPlusTreeNodeS::clear_node_type() {
  // @@protoc_insertion_point(one_of_clear_start:BPlusTreeNodeS)
  switch (node_type_case()) {
    case kLeafNode: {
      delete node_type_.leaf_node_;
      break;
    }
    case kInternalNode: {
      delete node_type_.internal_node_;
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_TYPE_NOT_SET;
}

void BPlusTreeNodeS::Clear() {
  // @@protoc_insertion_point(message_clear_start:BPlusTreeNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  clear_node_type();
  _internal_metadata_.Clear();
}

bool BPlusTreeNodeS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BPlusTreeNodeS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LeafNodeS leaf_node = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_leaf_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InternalNodeS internal_node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_internal_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BPlusTreeNodeS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BPlusTreeNodeS)
  return false;
#undef DO_
}

void BPlusTreeNodeS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BPlusTreeNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .LeafNodeS leaf_node = 1;
  if (has_leaf_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_leaf_node(), output);
  }

  // .InternalNodeS internal_node = 2;
  if (has_internal_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_internal_node(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:BPlusTreeNodeS)
}

::google::protobuf::uint8*
BPlusTreeNodeS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BPlusTreeNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .LeafNodeS leaf_node = 1;
  if (has_leaf_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_leaf_node(),
                                    deterministic, target);
  }

  // .InternalNodeS internal_node = 2;
  if (has_internal_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_internal_node(),
                                    deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BPlusTreeNodeS)
  return target;
}

size_t BPlusTreeNodeS::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:BPlusTreeNodeS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  switch (node_type_case()) {
    // .LeafNodeS leaf_node = 1;
    case kLeafNode: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                  *node_type_.leaf_node_);
      break;
    }
    // .InternalNodeS internal_node = 2;
    case kInternalNode: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                  *node_type_.internal_node_);
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPlusTreeNodeS::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:BPlusTreeNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  const BPlusTreeNodeS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const BPlusTreeNodeS>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:BPlusTreeNodeS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:BPlusTreeNodeS)
    MergeFrom(*source);
  }
}

void BPlusTreeNodeS::MergeFrom(const BPlusTreeNodeS& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:BPlusTreeNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  switch (from.node_type_case()) {
    case kLeafNode: {
      mutable_leaf_node()->::LeafNodeS::MergeFrom(from.leaf_node());
      break;
    }
    case kInternalNode: {
      mutable_internal_node()->::InternalNodeS::MergeFrom(from.internal_node());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
}

void BPlusTreeNodeS::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:BPlusTreeNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPlusTreeNodeS::CopyFrom(const BPlusTreeNodeS& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:BPlusTreeNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPlusTreeNodeS::IsInitialized() const { return true; }

void BPlusTreeNodeS::Swap(BPlusTreeNodeS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BPlusTreeNodeS::InternalSwap(BPlusTreeNodeS* other) {
  using std::swap;
  swap(node_type_, other->node_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BPlusTreeNodeS::GetMetadata() const {
  protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void InternalNodeS::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalNodeS::kKeysFieldNumber;
const int InternalNodeS::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalNodeS::InternalNodeS()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeNodeS
           .base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:InternalNodeS)
}
InternalNodeS::InternalNodeS(const InternalNodeS& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:InternalNodeS)
}

void InternalNodeS::SharedCtor() {}

InternalNodeS::~InternalNodeS() {
  // @@protoc_insertion_point(destructor:InternalNodeS)
  SharedDtor();
}

void InternalNodeS::SharedDtor() {}

void InternalNodeS::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor* InternalNodeS::descriptor() {
  ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const InternalNodeS& InternalNodeS::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_BPlusTreeNodeS
           .base);
  return *internal_default_instance();
}

void InternalNodeS::Clear() {
  // @@protoc_insertion_point(message_clear_start:InternalNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  keys_.Clear();
  children_.Clear();
  _internal_metadata_.Clear();
}

bool InternalNodeS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InternalNodeS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                  ::google::protobuf::int32,
                  ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                  input, this->mutable_keys())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::
                  ReadRepeatedPrimitiveNoInline<
                      ::google::protobuf::int32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                      1, 10u, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BPlusTreeNodeS children = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InternalNodeS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InternalNodeS)
  return false;
#undef DO_
}

void InternalNodeS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InternalNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 keys = 1;
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        output);
    output->WriteVarint32(
        static_cast<::google::protobuf::uint32>(_keys_cached_byte_size_));
  }
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(this->keys(i),
                                                                  output);
  }

  // repeated .BPlusTreeNodeS children = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->children_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->children(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:InternalNodeS)
}

::google::protobuf::uint8*
InternalNodeS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InternalNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 keys = 1;
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast<::google::protobuf::int32>(_keys_cached_byte_size_),
        target);
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(
            this->keys_, target);
  }

  // repeated .BPlusTreeNodeS children = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->children_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->children(static_cast<int>(i)),
                                    deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalNodeS)
  return target;
}

size_t InternalNodeS::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:InternalNodeS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated int32 keys = 1;
  {
    size_t data_size =
        ::google::protobuf::internal::WireFormatLite::Int32Size(this->keys_);
    if (data_size > 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .BPlusTreeNodeS children = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalNodeS::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:InternalNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalNodeS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalNodeS>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:InternalNodeS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:InternalNodeS)
    MergeFrom(*source);
  }
}

void InternalNodeS::MergeFrom(const InternalNodeS& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  keys_.MergeFrom(from.keys_);
  children_.MergeFrom(from.children_);
}

void InternalNodeS::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:InternalNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalNodeS::CopyFrom(const InternalNodeS& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:InternalNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalNodeS::IsInitialized() const { return true; }

void InternalNodeS::Swap(InternalNodeS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalNodeS::InternalSwap(InternalNodeS* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InternalNodeS::GetMetadata() const {
  protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void LeafNodeS::InitAsDefaultInstance() {
  ::_LeafNodeS_default_instance_._instance.get_mutable()->next_ =
      const_cast<::LeafNodeS*>(::LeafNodeS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNodeS::kKeysFieldNumber;
const int LeafNodeS::kValuesFieldNumber;
const int LeafNodeS::kNextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNodeS::LeafNodeS()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_LeafNodeS
           .base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeafNodeS)
}
LeafNodeS::LeafNodeS(const LeafNodeS& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_next()) {
    next_ = new ::LeafNodeS(*from.next_);
  } else {
    next_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LeafNodeS)
}

void LeafNodeS::SharedCtor() { next_ = NULL; }

LeafNodeS::~LeafNodeS() {
  // @@protoc_insertion_point(destructor:LeafNodeS)
  SharedDtor();
}

void LeafNodeS::SharedDtor() {
  if (this != internal_default_instance()) delete next_;
}

void LeafNodeS::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor* LeafNodeS::descriptor() {
  ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const LeafNodeS& LeafNodeS::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_serialization_2fsrc_2fBPlusTree_2eproto::scc_info_LeafNodeS
           .base);
  return *internal_default_instance();
}

void LeafNodeS::Clear() {
  // @@protoc_insertion_point(message_clear_start:LeafNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  keys_.Clear();
  values_.Clear();
  if (GetArenaNoVirtual() == NULL && next_ != NULL) {
    delete next_;
  }
  next_ = NULL;
  _internal_metadata_.Clear();
}

bool LeafNodeS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LeafNodeS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                  ::google::protobuf::int32,
                  ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                  input, this->mutable_keys())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::
                  ReadRepeatedPrimitiveNoInline<
                      ::google::protobuf::int32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                      1, 10u, input, this->mutable_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 values = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                  ::google::protobuf::uint64,
                  ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                  input, this->mutable_values())));
        } else if (static_cast<::google::protobuf::uint8>(tag) ==
                   static_cast<::google::protobuf::uint8>(
                       16u /* 16 & 0xFF */)) {
          DO_((
              ::google::protobuf::internal::WireFormatLite::
                  ReadRepeatedPrimitiveNoInline<
                      ::google::protobuf::uint64,
                      ::google::protobuf::internal::WireFormatLite::
                          TYPE_UINT64>(1, 18u, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LeafNodeS next = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeafNodeS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeafNodeS)
  return false;
#undef DO_
}

void LeafNodeS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeafNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 keys = 1;
  if (this->keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        output);
    output->WriteVarint32(
        static_cast<::google::protobuf::uint32>(_keys_cached_byte_size_));
  }
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(this->keys(i),
                                                                  output);
  }

  // repeated uint64 values = 2;
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
        2,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        output);
    output->WriteVarint32(
        static_cast<::google::protobuf::uint32>(_values_cached_byte_size_));
  }
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
        this->values(i), output);
  }

  // .LeafNodeS next = 3;
  if (this->has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_next(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:LeafNodeS)
}

::google::protobuf::uint8* LeafNodeS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LeafNodeS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 keys = 1;
  if (this->keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
        1,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast<::google::protobuf::int32>(_keys_cached_byte_size_),
        target);
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32NoTagToArray(
            this->keys_, target);
  }

  // repeated uint64 values = 2;
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
        2,
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
        target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast<::google::protobuf::int32>(_values_cached_byte_size_),
        target);
    target =
        ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTagToArray(
            this->values_, target);
  }

  // .LeafNodeS next = 3;
  if (this->has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(3, this->_internal_next(), deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeafNodeS)
  return target;
}

size_t LeafNodeS::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LeafNodeS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated int32 keys = 1;
  {
    size_t data_size =
        ::google::protobuf::internal::WireFormatLite::Int32Size(this->keys_);
    if (data_size > 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keys_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 values = 2;
  {
    size_t data_size =
        ::google::protobuf::internal::WireFormatLite::UInt64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .LeafNodeS next = 3;
  if (this->has_next()) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*next_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafNodeS::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LeafNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafNodeS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafNodeS>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LeafNodeS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LeafNodeS)
    MergeFrom(*source);
  }
}

void LeafNodeS::MergeFrom(const LeafNodeS& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LeafNodeS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from.has_next()) {
    mutable_next()->::LeafNodeS::MergeFrom(from.next());
  }
}

void LeafNodeS::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LeafNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNodeS::CopyFrom(const LeafNodeS& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LeafNodeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNodeS::IsInitialized() const { return true; }

void LeafNodeS::Swap(LeafNodeS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNodeS::InternalSwap(LeafNodeS* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  values_.InternalSwap(&other->values_);
  swap(next_, other->next_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeafNodeS::GetMetadata() const {
  protobuf_serialization_2fsrc_2fBPlusTree_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_serialization_2fsrc_2fBPlusTree_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BPlusTreeS*
Arena::CreateMaybeMessage<::BPlusTreeS>(Arena* arena) {
  return Arena::CreateInternal<::BPlusTreeS>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BPlusTreeNodeS*
Arena::CreateMaybeMessage<::BPlusTreeNodeS>(Arena* arena) {
  return Arena::CreateInternal<::BPlusTreeNodeS>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::InternalNodeS*
Arena::CreateMaybeMessage<::InternalNodeS>(Arena* arena) {
  return Arena::CreateInternal<::InternalNodeS>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LeafNodeS*
Arena::CreateMaybeMessage<::LeafNodeS>(Arena* arena) {
  return Arena::CreateInternal<::LeafNodeS>(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
